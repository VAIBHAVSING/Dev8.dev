name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PNPM_VERSION: 9
  NODE_VERSION: 20
  GO_VERSION: 1.21

jobs:
  # Job 1: Install dependencies and setup cache
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache-dir: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "pnpm-cache-dir=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Job 2: Lint and Format Check
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          # Run lint with relaxed warnings for CI (allow up to 10 warnings)
          cd apps/web && npx next lint --max-warnings 10
          cd ../docs && npx next lint --max-warnings 10
          # Run other workspace lints
          pnpm --filter @repo/ui lint
          pnpm --filter agent lint

      - name: Check Prettier formatting
        run: |
          # Check if code is properly formatted
          if ! prettier --check "**/*.{ts,tsx,md}"; then
            echo "Code is not formatted. Please run 'pnpm format'"
            exit 1
          fi

      - name: Check TypeScript types
        run: pnpm check-types

  # Job 3: Go Lint and Format Check
  go-lint-and-format:
    name: Go Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go tools
        working-directory: apps/agent
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Check Go formatting
        working-directory: apps/agent
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go files are not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

      - name: Check Go imports
        working-directory: apps/agent
        run: |
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "Go imports are not formatted. Please run 'goimports -w .'"
            goimports -l .
            exit 1
          fi

      - name: Run Go lint
        working-directory: apps/agent
        run: golangci-lint run

      - name: Run Go vet
        working-directory: apps/agent
        run: go vet ./...

      - name: Run staticcheck
        working-directory: apps/agent
        run: staticcheck ./...

  # Job 4: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: setup
    
    # Add environment variables needed for the build
    env:
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'fallback-secret-for-ci' }}
      NEXTAUTH_URL: http://localhost:3000
      DATABASE_URL: postgresql://test:test@localhost:5432/testdb
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || 'test-client-id' }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || 'test-client-secret' }}
      GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID || 'test-github-id' }}
      GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET || 'test-github-secret' }}
      
    strategy:
      matrix:
        workspace: [web, docs, agent]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Go (for agent workspace)
        if: matrix.workspace == 'agent'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Cache Go modules (for agent)
        if: matrix.workspace == 'agent'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client (for web workspace)
        if: matrix.workspace == 'web'
        run: pnpm --filter web db:generate

      - name: Build workspace
        run: pnpm --filter ${{ matrix.workspace }} build

      - name: Run tests (if available)
        run: pnpm --filter ${{ matrix.workspace }} test --if-present

      - name: Run Go tests (for agent)
        if: matrix.workspace == 'agent'
        working-directory: apps/agent
        run: go test ./... -v

  # Job 5: Security and Dependency Check
  security-check:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for outdated dependencies
        run: pnpm outdated || true

  # Job 6: Full Integration Build
  integration-build:
    name: Full Integration Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, go-lint-and-format, build-and-test]
    
    # Add environment variables needed for the build
    env:
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'fallback-secret-for-ci' }}
      NEXTAUTH_URL: http://localhost:3000
      DATABASE_URL: postgresql://test:test@localhost:5432/testdb
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || 'test-client-id' }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || 'test-client-secret' }}
      GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID || 'test-github-id' }}
      GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET || 'test-github-secret' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ needs.setup.outputs.pnpm-cache-dir }}
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter web db:generate

      - name: Full monorepo build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/docs/.next/
            apps/agent/bin/
          retention-days: 7
