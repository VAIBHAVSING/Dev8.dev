name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job for detecting changes to optimize CI runs
  changes:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.changes.outputs.go }}
      typescript: ${{ steps.changes.outputs.typescript }}
      web: ${{ steps.changes.outputs.web }}
      docs: ${{ steps.changes.outputs.docs }}
      agent: ${{ steps.changes.outputs.agent }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go:
              - 'apps/agent/**'
              - 'go.mod'
              - 'go.sum'
            typescript:
              - 'apps/web/**'
              - 'apps/docs/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
            web:
              - 'apps/web/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            docs:
              - 'apps/docs/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            agent:
              - 'apps/agent/**'

  # TypeScript/Node.js jobs
  typescript-lint:
    needs: changes
    if: ${{ needs.changes.outputs.typescript == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint TypeScript
        run: pnpm lint

  typescript-format:
    needs: changes
    if: ${{ needs.changes.outputs.typescript == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check TypeScript formatting
        run: |
          pnpm format
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not properly formatted. Please run 'pnpm format' and commit the changes."
            git diff
            exit 1
          fi

  typescript-typecheck:
    needs: changes
    if: ${{ needs.changes.outputs.typescript == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        run: pnpm check-types

  typescript-build:
    needs: changes
    if: ${{ needs.changes.outputs.typescript == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build applications
        run: pnpm build
        env:
          # Provide dummy values for build-time environment variables
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          AUTH_SECRET: "dummy-secret-for-build"
          NEXTAUTH_URL: "http://localhost:3000"

  # Go jobs
  go-lint:
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/agent
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: go mod download
        
      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
        
      - name: Run go vet
        run: go vet ./...
        
      - name: Run staticcheck
        run: staticcheck ./...

  go-format:
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/agent
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          
      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest
        
      - name: Check Go formatting
        run: |
          gofmt -s -d .
          if [ -n "$(gofmt -s -l .)" ]; then
            echo "Go code is not properly formatted. Please run 'go fmt ./...' and commit the changes."
            exit 1
          fi
          
      - name: Check goimports
        run: |
          goimports -d .
          if [ -n "$(goimports -l .)" ]; then
            echo "Go imports are not properly formatted. Please run 'goimports -w .' and commit the changes."
            exit 1
          fi

  go-test:
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/agent
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: go mod download
        
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/agent/coverage.out
          flags: go
          name: go-coverage

  go-build:
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/agent
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: go mod download
        
      - name: Build application
        run: go build -v -o bin/agent .
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-binary
          path: apps/agent/bin/agent

  # Database migration test (for web app)
  test-db-migrations:
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    defaults:
      run:
        working-directory: ./apps/web
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Test database migrations
        run: |
          pnpm db:generate
          pnpm db:deploy
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

  # Final status check
  ci-success:
    runs-on: ubuntu-latest
    needs: [
      changes,
      typescript-lint,
      typescript-format,
      typescript-typecheck,
      typescript-build,
      go-lint,
      go-format,
      go-test,
      go-build,
      test-db-migrations
    ]
    if: always()
    steps:
      - name: Check CI success
        run: |
          if [[ "${{ needs.typescript-lint.result }}" == "failure" || \
                "${{ needs.typescript-format.result }}" == "failure" || \
                "${{ needs.typescript-typecheck.result }}" == "failure" || \
                "${{ needs.typescript-build.result }}" == "failure" || \
                "${{ needs.go-lint.result }}" == "failure" || \
                "${{ needs.go-format.result }}" == "failure" || \
                "${{ needs.go-test.result }}" == "failure" || \
                "${{ needs.go-build.result }}" == "failure" || \
                "${{ needs.test-db-migrations.result }}" == "failure" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs completed successfully"
